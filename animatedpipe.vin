//
// animatedpipe.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

class AnimPipe() {

    num w = 10;			// line width 										// could be static / global
 	num n = 0;   		// # points
	num px[0];			// x co-ordinates
	num py[0];			// y co-ordinates
	num ls[0];			// line segment lengths
    num ll = 0;			// line length (assumes a Manhattan layout)
	num head = 1;		// if 1 draw line with an arrow60 end

    Pen bgPen0 = SolidPen(SOLID, w, GRAY192, BEVEL_JOIN | BUTT_END);		// could be static / global
	Pen bgPen1 = SolidPen(SOLID, w, GRAY192, BEVEL_JOIN | ARROW60_END);		// could be static / global

    Pen fgPen0 = SolidPen(SOLID, w, RED, BEVEL_JOIN | BUTT_END);			// could be static / global
    Pen fgPen1 = SolidPen(SOLID, w, RED, BEVEL_JOIN | ARROW60_END);			// could be static / global

    Line bgLine = Line(inactivePipesLayer, 0, bgPen1, 0, 0);	
	Line fgLine = Line(activePipesLayer, 0, fgPen0, 0, 0);		

    function setOpacity(num opacity) { 
        bgLine.setOpacity(opacity);
        fgLine.setOpacity(opacity);
    }

    function setHead(num h) {
        head = h ? 1 : 0;
		bgLine.setPen(head ? bgPen1 : bgPen0);
		fgLine.setPen(fgPen0);
    }

    function addPoint(num x, num y) {
        px[n] = x;
        py[n] = y;
        bgLine.setPt(n, x, y);
        n++;
    }

    function calcLength() {
        num dx, dy;
        ll = 0;
        for (num i = 0; i < n - 1; i++) {
            dx = px[i + 1] - px[i];
            dy = py[i + 1] - py[i];
            ll += ls[i] = sqrt(dx*dx + dy*dy);
        }
    }

    // Only call on inactive arrows
    function setPoint(num n, num x, num y) {
        px[n] = x;
        py[n] = y;
        bgLine.setPt(n, x, y);
    }

    function reset() {
		fgLine.setNPts(0);
        fgLine.setPen(fgPen0);
    }

    function animate(num steps) {	
		num l = 0, s, ss = 0;
		num d = 0;
		calcLength();
		fgLine.setPt(0, px[0], py[0]);
		fgLine.setPen(fgPen0);
		for (num i = 1; i < n; i++) {
			fgLine.setPt(i, px[i - 1], py[i - 1]);
			l += ls[i - 1];
			s = round(l * steps / ll);
			fgLine.setPt(i, px[i], py[i], s - ss, 1, 1);
			ss = s;
		}
		if (head)
			fgLine.setPen(fgPen1);
	}
}

// eof