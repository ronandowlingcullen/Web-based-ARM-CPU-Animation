//
// register.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

const num HORIZONTAL = 0;
const num VERTICAL = 1;

const num LEFT = 0;
const num RIGHT = 1;
const num TOP = 2;
const num BOTTOM = 3;

Brush regBrush = SolidBrush(PURPLE);
Brush regValueBrush = SolidBrush(WHITE);

class Register(num x, num y, num w, num h, num labelPos, string caption) {

    num vx, vy, vw, vh;
    num value = 0, newValue = 0;
    num tag = 0, newTag = 0;
    num useTag = 0, invalid = 0;
    num fixed = 0;                      // for r0 
    Rectangle label;

    Rectangle r1 = Rectangle2(0, 0, blackPen, regBrush, x, y, w, h);
	r1.setRounded(2, 2);	
    Rectangle bg1 = Rectangle2(valuesLayer, 0, 0, whiteBrush, vx, vy, vw / 2, vh);           	
    Rectangle bg2 = Rectangle2(valuesLayer, 0, 0, whiteBrush, vx + vw / 2, vy, vw / 2, vh);  	

    if (w >= h) {

        //
        // horizontal
        //
        vy = y + 4;
        vw = w - 38;
        vh = h - 9;

        if (labelPos == LEFT) {
			Rectangle r2 = Rectangle(0, 0, 0, 0, x + 17 - 1, y + h/2, -17, -h/2, 34, h, 0, font, caption);	
			r2.rotate(-90);	
            vx = x + 32;
        } else if (labelPos == RIGHT) {
          r2 = Rectangle(0, 0, 0, 0, x + w - 19, y + h/2, -19, -h/2, 38, h, 0, font, caption);
            r2.rotate(-90);
           	vx = x + 5;
        }

    } else {

        //
        // vertical
        //
        vx = x + 5;
        vw = w - 11;
        vh = h - 31;

        if (labelPos == TOP) {
            r2 = Rectangle2(0, 0, 0, 0, x,y, w,31, 0, font, caption);
            vy = y + 26;
        } else if (labelPos == BOTTOM) {
            r2 = Rectangle2(0, 0, 0, 0, x,y+h-22, w,22, 0, font, caption);
            vy = y + 4;
        }

    }

    //
    // register value (horizontal or vertical)
    //
    if (w >= h) {
        label = Rectangle2(valuesLayer, 0, 0, yellowBrush, vx, vy, vw, vh, 0, font, "%02X", value);
    } else {
        label = Rectangle(valuesLayer, 0, 0, yellowBrush, vx + vw/2, vy + vh/2, -vw/2, -vh/2, vw, vh, 0, font, "%02X", value);
    }
	label.setRounded(2, 2); 	

    //
    // setFixed
    //
    function setFixed() {                   
        fixed = 1;
    }

    //
    // setOpacity
    //
    function setOpacity(num opacity) {
        r1.setOpacity(opacity);
        r2.setOpacity(opacity);
        bg1.setOpacity(opacity);
        bg2.setOpacity(opacity);
        label.setOpacity(opacity);
    }

	//
	// rotateText
	//
	function rotateText(num deg){
		r2.rotate(deg);
	}

    //
    // updateLabel
    //
    num function updateLabel() {								
        if (invalid) {
            label.setTxt("INV");
        } else if (useTag) {
            if (tag >= 0)
                label.setTxt("R%d:%02X", tag, value)
            else
                label.setTxt("--:%02X", value);
        } else {
            label.setTxt("%02X", value);
        }
		return 0;
    }

	//
    // mouse enter exit event handler
    //
    when label ~> eventEE(num enter, num x, num y) {			
        if (fixed == 0)
            label.setBrush(enter ? whiteBrush : yellowBrush);	
		return 0;
    }

    //
    // mouse left button event handler
    //
    when label ~> eventMB(num down, num flags, num x, num y) {	
        if (fixed == 0 && down) {
			if (flags & MB_LEFT) {
            	value = (value + 1) & 0xFF;
			} else if (flags & MB_RIGHT) {
				value = (value - 1) & 0xFF;
			}
            updateLabel();
        }
		return 0;
    }

    //
    // setValue
    //
    function setValue(num val) {
        value = val;
        invalid = 0;
        updateLabel();
    }

    //
    // setNewValue
    //
    function setNewValue(num val) {
        newValue = val;
    }

    //
    // setNewTag
    //
    function setNewTag(num t) {
        newTag = t;
    }

    //
    // setTag
    //
    function setTag(num t) {
        useTag = 1;
        tag = t;
        updateLabel();
    }

    //
    // update
    //
    function update() {			
        value = newValue;
        tag = newTag;
        updateLabel();
        bg1.setBrush(yellowBrush);  
        bg2.setBrush(yellowBrush);  
        wait(16);
        bg1.setBrush(whiteBrush);  
        bg2.setBrush(whiteBrush);  
    }

    //
    // setInvalid
    //
    function setInvalid(num i) {
        useTag = 1;
        invalid = i;
    }

    //
    // tagMatches
    //
    num function tagMatches(num t) {
        return (invalid) ? 0 : (tag == t) ? 1 : 0;  
    }

    num hmode = 0;

    //
    // highlight
    //
    function highlight(Brush brush) {
        if (hmode == 0) {
            bg1.setBrush(brush);    
            bg2.setBrush(brush);    
            hmode = 1;
        } else {
            bg2.setBrush(brush);    
        }
    }

    //
    // unHighlight
    //
    function unHighlight() {
        bg1.setBrush(whiteBrush);  
        bg2.setBrush(whiteBrush);  
        hmode = 0;
    }

    //
    // reset
    //
    function reset() {
        value = 0;
        newValue = 0;
        tag = 0;
        newTag = 0;
        useTag = 0;
        invalid = 0;
        unHighlight();
        updateLabel();
    }


	//
	// doubleUpdate
	// updates this register and the passedRegister to the same values
	function doubleUpdate(Register reg2) {
		update();
        reg2.value = newValue;
        reg2.tag = newTag;
        reg2.updateLabel();
        reg2.bg1.setBrush(yellowBrush);
        reg2.bg2.setBrush(yellowBrush);
        reg2.bg1.setBrush(whiteBrush);
        reg2.bg2.setBrush(whiteBrush);
	}

}

// eof