//
// instructionmemory.vin
//
// Simulation of the DLX
// Written by Edsko de Vries, Summer 2003
//
// Copyright (C) 2003 - 2018 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

Brush instrMemBrush = SolidBrush(BORDEAU);
Brush instrMemValueBrush = SolidBrush(WHITE);
Pen lightPen = SolidPen(DOT, 1, rgba(0.75, 0.75, 0.75));

Pen redArrow = SolidPen(SOLID, 1, RED, ARROW60_END);

class Instruction(num _x, num _y, num _w, num _h, num _addr) {

	num x = _x;
	num y = _y;
	num w = _w;
	num h = _h;
	num addr = _addr;

	string vSBit = " ";
    num vIns = 0, vIns2 = 0, vCond = 0, vRdt = 0, vRs1 = 0, vRs2 = 0, vRs3 = 0;
    num opTypeRdt = 0, opTypeRs1 = 0, opTypeRs2 = 0, opTypeRs3 = 0;
	num shiftOk = 0;
	num sOk = 0;
    num clk;

    num fw = w / 11;

    // Brushes for the individual boxes so we can highlight them one by one
    Pen insPen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen sBitPen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen condPen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen rdtPen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen rs1Pen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen rs2Pen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen ins2Pen = SolidPen(0, 0, BLACK); // {joj 25/7/10}
    Pen rs3Pen = SolidPen(0, 0, BLACK); // {joj 25/7/10}

    Brush brush = SolidBrush(WHITE);
    Rectangle adr = Rectangle2(valuesLayer, 0, 0, brush, x, y, fw, h, 0, font, "%02X", addr);
    Rectangle ins = Rectangle2(valuesLayer, HLEFT, 0, brush, x + fw, y, 2 * fw, h, insPen, font, " NOP"); // {joj 25/7/10}
    Rectangle sBit = Rectangle2(valuesLayer, HLEFT, 0, brush, x + 3 * fw, y, 0.5 * fw, h, sBitPen, font, "S"); // {joj 25/7/10}
    Rectangle cond = Rectangle2(valuesLayer, HLEFT, 0, brush, x + 3.5 * fw, y, fw, h, condPen, font, "AL"); // {joj 25/7/10}
    Rectangle rdt = Rectangle2(valuesLayer, 0, 0, brush, x + 5 * fw, y, fw, h, rdtPen, font, "-");
    Rectangle rs1 = Rectangle2(valuesLayer, 0, 0, brush, x + 6 * fw, y, fw, h, rs1Pen, font, "-");
    Rectangle rs2 = Rectangle2(valuesLayer, 0, 0, brush, x + 7.2 * fw, y, fw, h, rs2Pen, font, "-");
    Rectangle ins2 = Rectangle2(valuesLayer, HLEFT, 0, brush, x + 8.2 * fw, y, 2 * fw, h, ins2Pen, font, " NOP");
    Rectangle rs3 = Rectangle2(valuesLayer, 0, 0, brush, x + 10 * fw, y, fw, h, rs2Pen, font, "-");

    Rectangle dot = Rectangle2(valuesLayer, 0, 0, redBrush, x+fw*0.8, y+2, h/2, h/2);	// {joj 30/10/06}
    dot.setOpacity(0);                                                                  // {joj 30/10/06}

    Line arrowDown = Line(valuesLayer, 0, redArrow,		// {joj 17/10/16}
        0, 0,											// {joj 17/10/16}
		x + w + 2, y + h * 0.5,
        5, 0,
        0, 0,
        0, 0
    );

    Line arrowUp = Line(valuesLayer, 0, redArrow,       // {joj 17/10/16}
        0, 0,											// {joj 17/10/16}
		x - 2, y + h * 0.5,
		-5, 0,
        0, 0,
		0, 0
    );

    arrowDown.setOpacity(0);
    arrowUp.setOpacity(0);

    when adr ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
		return 0;
    }

    when ins ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        insPen.setRGBA(enter ? RED : BLACK);					// {joj 24/9/17}
		return 0;
    }

	when sBit ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        sBitPen.setRGBA(enter ? RED : BLACK);					// {joj 24/9/17}
		return 0;
    }

	when cond ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        condPen.setRGBA(enter ? RED : BLACK);					// {joj 24/9/17}
		return 0;
    }

    when ins2 ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        ins2Pen.setRGBA(enter ? RED : BLACK);					// {joj 24/9/17}
		return 0;
    }

    when rdt ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        if (opTypeRdt != OP_TYPE_UNUSED) {
            rdtPen.setRGBA(enter ? RED : BLACK);				// {joj 24/9/17}
        } else {
            rdtPen.setRGBA(BLACK);								// {joj 24/9/17}
		}
		return 0;
    }

    when rs1 ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        if (opTypeRs1 != OP_TYPE_UNUSED) {
            rs1Pen.setRGBA(enter ? RED : BLACK);				// {joj 24/9/17}
        } else {
            rs1Pen.setRGBA(BLACK);								// {joj 24/9/17}
		}
		return 0;
    }

    when rs2 ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        if (opTypeRs2 != OP_TYPE_UNUSED) {
            rs2Pen.setRGBA(enter ? RED : BLACK);				// {joj 24/9/17}
        } else {
            rs2Pen.setRGBA(BLACK);								// {joj 14/9/17}
		}
		return 0;
    }

    when rs3 ~> eventEE(num enter, num, num) {					// {joj 24/9/17}
        brush.setSolid(enter ? MARINE : WHITE);
        if (opTypeRs3 != OP_TYPE_UNUSED) {
            rs3Pen.setRGBA(enter ? RED : BLACK);				// {joj 24/9/17}
        } else {
            rs3Pen.setRGBA(BLACK);								// {joj 14/9/17}
		}
		return 0;
    }

    num function getOpcode() {                                  // {joj 27/10/06}
        return vIns << 24 | vRdt << 16 | vRs1 << 8 | vRs2;      // {joj 27/10/06}
    }                                                           // {joj 27/10/06}

    function initRegs(num remember) {                           // {joj 27/10/06}

        num offset;

        ins.setTxt("%c%s", 32, instrNames[vIns]);
        cond.setTxt("%c%s", 32, condNames[vCond]);

        opTypeRdt = instrOpTypeRdt(vIns);
        opTypeRs1 = instrOpTypeRs1(vIns);
        opTypeRs2 = instrOpTypeRs2(vIns);
        opTypeRs3 = instrOpTypeRs3(vIns,vIns2);

		shiftOk = shiftAllowed(vIns);
		sOk = sAllowed(vIns);
		
		if(sOk) {
        	sBit.setTxt("%c%s", 32, vSBit);
		} else {
			sBit.setTxt(" ");
		}
			

		if(shiftOk) {
	        ins2.setTxt("%c%s", 32, instrNames[vIns2]);
		} else {
			ins2.setTxt("--");
		}

		if (opTypeRs1 == OP_TYPE_REG)
            vRs1 = (vRs1 % 16);

        if (opTypeRs2 == OP_TYPE_REG)
            vRs2 = (vRs2 % 16);

        if (opTypeRs3 == OP_TYPE_REG)
            vRs3 = (vRs3 % 16);

		
        if (opTypeRdt == OP_TYPE_UNUSED) rdt.setTxt("-") else rdt.setTxt("R%d", vRdt);		

        if (opTypeRs1 == OP_TYPE_UNUSED){
			rs1.setTxt("-");
		} else if (opTypeRs1 == OP_TYPE_IMM) {
			rs1.setTxt("%02X", vRs1);
		} else {
			if(vIns == LDR || vIns == STR || vIns == LDRi || vIns == STRi) {
				rs1.setTxt("[R%d", vRs1)
			} else {
				rs1.setTxt("R%d", vRs1);
			}
		}

        if (opTypeRs2 == OP_TYPE_UNUSED)
            rs2.setTxt("-")
        else if (opTypeRs2 == OP_TYPE_REG) {
			if((vIns == LDR || vIns == STR) && opTypeRs3 == OP_TYPE_UNUSED) {
				rs2.setTxt("R%d]", vRs2);
			} else {
				rs2.setTxt("R%d", vRs2);
			}
        } else {
			if((vIns == LDRi || vIns == STRi) && opTypeRs3 == OP_TYPE_UNUSED) {
				rs2.setTxt("%02X]", vRs2);
			} else {
				rs2.setTxt("%02X", vRs2);
			}
		}

        if (opTypeRs3 == OP_TYPE_UNUSED)
            rs3.setTxt("-")
        else if (opTypeRs3 == OP_TYPE_REG){
            if(vIns == LDR || vIns == STR) {
				rs3.setTxt("R%d]", vRs3)
			} else {
				rs3.setTxt("R%d", vRs3)
			}
        } else {
            if(vIns == LDR || vIns == STR) {
				rs3.setTxt("%02X]", vRs3);
			} else {
				rs3.setTxt("%02X", vRs3)
			}
		}

        if (instrIsBranch(vIns) ) { //|| isJorJAL(vIns)) { //-------------------May need to fix--------------------------
            if (vRs2 & 0x80) {
                // Jump up
                offset = (se8(vRs2)/4)*h + h/2;					// relative
                arrowUp.setPt(2, x - 7, y + offset);			// {joj 5/10/16}
                arrowUp.setPt(3, x - 2, y + offset);			// {joj 5/10/16}
                arrowUp.setOpacity(1);
                arrowDown.setOpacity(0);
            } else {
                // Jump down
                offset = (vRs2/4)*h + h/2;						// relative jump
                arrowDown.setPt(2, x + w + 7, y + offset);		// {joj 5/10/16}
                arrowDown.setPt(3, x + w + 2, y + offset);		// {joj 5/10/16}
                arrowDown.setOpacity(1);
                arrowUp.setOpacity(0);
            }
        } else {
            arrowUp.setOpacity(0);
            arrowDown.setOpacity(0);
        }

        if (remember) {                                                 // {joj 27/10/06}
            string s = sprintf("i%d", addr / 4);						// {joj 31/01/01}
			setArg(s, getOpcode().toString());							// {joj 6/11/16}
            example = 0;                                                // {joj 27/10/06}
			setArg("example", example.toString());						// {joj 6/11/16}
        }

    }

    function setValue(num instr, num rdt, num rs1, num rd2imm) {
        vIns = instr;
        vRdt = rdt;
        vRs1 = rs1;
        vRs2 = rd2imm & 0xff;                                           // {joj 01/11/06}
        initRegs(0);                                                    // {joj 27/10/06}
    }

    function setOpcode(num opcode) {
        vIns = (opcode & 0xFF000000) >> 24;
        vRdt = (opcode & 0x00FF0000) >> 16;
        vRs1 = (opcode & 0x0000FF00) >> 8;
        vRs2 = (opcode & 0x000000FF);
        initRegs(0);                                                    // {joj 27/10/06}
    }

    when ins ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/9/17}
        if (!lockCircuit) {
            if (down) {
                clk = timeMS();
				if (flags & MB_LEFT) {
                	vIns = (vIns == MAX_INSTR) ? 0 : vIns + 1;
				} else if (flags & MB_RIGHT) {
 					vIns = (vIns == 0) ? MAX_INSTR : vIns - 1;
				}
            } else {
                clk = clk + 500;
                if (timeMS() > clk)
                    vIns = 0;
            }
            initRegs(1);
        }
		return 0;
    }


	when sBit ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/9/17}
        if (!lockCircuit && sOk) {
            if (down) {
                clk = timeMS();
				if (flags & MB_LEFT) {
                	vSBit = (vSBit == " ") ? "S" : " ";
				} else if (flags & MB_RIGHT) {
                	vSBit = (vSBit == " ") ? "S" : " ";
				}
            } else {
                clk = clk + 500;
                if (timeMS() > clk)
                    vSBit = 0;
            }
            initRegs(1);
        }
		return 0;
    }


    when cond ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/9/17}
        if (!lockCircuit) {
            if (down) {
                clk = timeMS();
				if (flags & MB_LEFT) {
                	vCond = (vCond == MAX_COND) ? 0 : vCond + 1;
				} else if (flags & MB_RIGHT) {
 					vCond = (vCond == 0) ? MAX_COND : vCond - 1;
				}
            } else {
                clk = clk + 500;
                if (timeMS() > clk)
                    vCond = 0;
            }
            initRegs(1);
        }
		return 0;
    }

    when ins2 ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/9/17}
        if (!lockCircuit && shiftOk) {
            if (down) {
                clk = timeMS();
				//Special functionallity so only shift operations possible
				if (flags & MB_LEFT) {
					if(vIns2 == 0) { //Jump to shift instructions
						vIns2 = LSL;
					} else if(vIns2 == RORi) { //loop back to start
						vIns2 = 0;
					} else if (vIns2 == ROR) { //Jump to  immediate shift ops
						vIns2 = LSLi;
					} else {
						vIns2 = vIns2 + 1;
					}
				} else if (flags & MB_RIGHT) {
					if(vIns2 == 0) {
						vIns2 = RORi;
 					} else if(vIns2 == LSL) { //loop back to start
						vIns2 = 0;
					} else if (vIns2 == LSLi) { //Jump to  immediate shift ops
						vIns2 = ROR;
					} else {
						vIns2 = vIns2 - 1;
					}
				}
            } else {
                clk = clk + 500;
                if (timeMS() > clk)
                    vIns2 = 0;
            }
            initRegs(1);
        }
		return 0;
    }

    when rdt ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/10/17}
        if (!lockCircuit && down && opTypeRdt != OP_TYPE_UNUSED) {
            if (flags & MB_LEFT) {
 				vRdt = (vRdt == 15) ? 0 : vRdt + 1;
            } else if (flags & MB_RIGHT)
				vRdt = (vRdt == 0) ? 15 : vRdt - 1;
 			initRegs(1);
		}
		return 0;
    }

	when rs1 ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/10/17}
        if (!lockCircuit && down) {
            if (flags & MB_LEFT) {
                if (opTypeRs1 == OP_TYPE_REG) {
                    vRs1 = (vRs1 + 1) % 16;
                } else if (opTypeRs1 == OP_TYPE_IMM) {
                    clk = timeMS();
                    vRs1 = (vRs1 + 1) % 256;
                }
			} else if (flags & MB_RIGHT) {
				if (opTypeRs1 == OP_TYPE_REG) {
                    vRs1 = (vRs1 - 1) % 16;
                    if (vRs1 < 0)
                        vRs1 = 16 + vRs1;
                } else if (opTypeRs1 == OP_TYPE_IMM) {
                    clk = timeMS();
                    vRs1 = (vRs1 - 1) % 256;
                    if (vRs1 < 0)
                        vRs1 = 256 + vRs1;
                }
            } else {
                if (opTypeRs1 == OP_TYPE_IMM) {
                    clk = clk + 500;
                    if (timeMS() > clk)
                        vRs1 = 0;
                }
            }
 			initRegs(1);
		}
		return 0;
    }

	when rs2 ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/10/17}
        if (!lockCircuit && down) {
            if (flags & MB_LEFT) {
                if (opTypeRs2 == OP_TYPE_REG) {
                    vRs2 = (vRs2 + 1) % 16;
                } else if (opTypeRs2 == OP_TYPE_IMM) {
                    clk = timeMS();
                    vRs2 = (vRs2 + 1) % 256;
                }
			} else if (flags & MB_RIGHT) {
				if (opTypeRs2 == OP_TYPE_REG) {
                    vRs2 = (vRs2 - 1) % 16;
                    if (vRs2 < 0)
                        vRs2 = 16 + vRs2;
                } else if (opTypeRs2 == OP_TYPE_IMM) {
                    clk = timeMS();
                    vRs2 = (vRs2 - 1) % 256;
                    if (vRs2 < 0)
                        vRs2 = 256 + vRs2;
                }
            } else {
                if (opTypeRs2 == OP_TYPE_IMM) {
                    clk = clk + 500;
                    if (timeMS() > clk)
                        vRs2 = 0;
                }
            }
            initRegs(1);
        }
    }

	when rs3 ~> eventMB(num down, num flags, num x, num y) {			// {joj 24/10/17}
        if (!lockCircuit && down) {
            if (flags & MB_LEFT) {
                if (opTypeRs3 == OP_TYPE_REG) {
                    vRs3 = (vRs3 + 1) %16;
                } else if (opTypeRs3 == OP_TYPE_IMM) {
                    clk = timeMS();
                    vRs3 = (vRs3 + 1) % 256;
                }
			} else if (flags & MB_RIGHT) {
				if (opTypeRs3 == OP_TYPE_REG) {
                    vRs3 = (vRs3 - 1) % 16;
                    if (vRs3 < 0)
                        vRs3 = 16 + vRs3;
                } else if (opTypeRs3 == OP_TYPE_IMM) {
                    clk = timeMS();
                    vRs3 = (vRs3 - 1) % 256;
                    if (vRs3 < 0)
                        vRs3 = 256 + vRs3;
                }
            } else {
                if (opTypeRs3 == OP_TYPE_IMM) {
                    clk = clk + 500;
                    if (timeMS() > clk)
                        vRs3 = 0;
                }
            }
            initRegs(1);
        }
    }

}

//
// Instruction Memory
//
class InstructionMemory(num x, num y, num w, num h) {
	
	
    
	//Headings
	Pen headingsPen = SolidPen(0, 0, RED);
	Font headingsFont = Font("Calibri", 18);

	Rectangle addrLabel = Rectangle2(0, 0, 0, 0, x+13, y, 10, 4, headingsPen, headingsFont, "Addr");
	Rectangle instrLabel = Rectangle2(0, 0, 0, 0 ,47 + x+13, y, 10, 4, headingsPen, headingsFont, "Instr");
	Rectangle sBitLabel = Rectangle2(0, 0, 0, 0 ,99 + x+13, y, 10, 4, headingsPen, headingsFont, "S");
	Rectangle condLabel = Rectangle2(0, 0, 0, 0 ,130 + x+13, y, 10, 4, headingsPen, headingsFont, "Cond");
	Rectangle rdLabel = Rectangle2(0, 0, 0, 0 ,175 + x+13, y, 10, 4, headingsPen, headingsFont, "Rd");
	Rectangle op1Label = Rectangle2(0, 0, 0, 0 ,210 + x+13, y, 10, 4, headingsPen, headingsFont, "Op1");
	Rectangle op2Label = Rectangle2(0, 0, 0, 0 ,250 + x+13, y, 10, 4, headingsPen, headingsFont, "Op2");
	Rectangle offsetLabel = Rectangle2(0, 0, 0, 0 ,300 + x+13, y, 10, 4, headingsPen, headingsFont, "Offset");
	
    num ih = (h-12 - 4) / 32;
    Instruction instruction[32];
    num active = 31;

    Rectangle r = Rectangle2(0, 0, blackPen, instrMemBrush, x, y+12, w, h-12);
	r.setRounded(2, 2);	// {joj 16/10/16}
    Rectangle2(0, 0, blackPen, instrMemValueBrush, x + 2, y+12 + 2, w - 4, h-12 - 4);

    for (num lp1 = 0; lp1 < 32; lp1++)
    	instruction[lp1] = Instruction(x + 2, y+12 + 2 + lp1 * ih, w - 4, ih, lp1 * 4);

    function setValue(num addr, num instr, num rdt, num rs1, num rs2imm) {
        instruction[addr / 4].setValue(instr, rdt, rs1, rs2imm);
    }

    num function getOpcode(num addr) {                                  // {joj 27/10/06}
        return instruction[addr / 4].getOpcode();                       // {joj 27/10/06}
    }                                                                   // {joj 27/10/06}

    function setOpcode(num addr, num opcode) {
        instruction[addr / 4].setOpcode(opcode);
    }

    function setActive(num addr) {
        instruction[active].dot.setOpacity(0);                          // {joj 30/10/06}
        active = addr / 4;
        instruction[active].dot.setOpacity(1);                        	// {joj 30/10/06}
    }

}

// eof