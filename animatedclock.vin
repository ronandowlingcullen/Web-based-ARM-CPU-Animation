//
// animatedclock.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

Pen redClockPen = SolidPen(SOLID, 1, RED, ROUND_START | ROUND_JOIN | ROUND_END);
Pen greenClockPen = SolidPen(SOLID, 1, GREEN, ROUND_START | ROUND_JOIN | ROUND_END);
Pen orangeClockPen = SolidPen(SOLID, 1, ORANGE, ROUND_START | ROUND_JOIN | ROUND_END);

//
// AnimatedClock
//
class AnimatedClock(num x, num y, num w, num h) extends Group(0, 0, x, y, 0, 0, w, h) {	

    num cw = w;
    num chw = cw / 2;
    num ch = h - 6;

    num stall = 0, type = 0;

	setClipPath(R$(0, 0, w, h));																					

    Rectangle clkDisplay = Rectangle2(0, 0, blackPen, whiteBrush, 0, 0, w, h);										
	clkDisplay.setRounded(2, 2);																					

    Line prev_clock = Line(activePipesLayer, 0, redClockPen, -chw+chw/5,3+ch, 0,0, 0,-ch, chw,0, 0,ch, chw,0);		
    Line next_clock = Line(activePipesLayer, 0, greenClockPen, chw+chw/5,3+ch, 0,0, 0,-ch, chw,0, 0,ch, chw,0);		

    Rectangle dot = Rectangle2(activePipesLayer, 0, 0, blackBrush, w/2-3, h-6, 6, 6);    							

    num canUpdate;

    function clockCycle(num length) {																				

        num l2 = length / 2;
        num l5 = length / 5;
        num l10 = length / 10;

        canUpdate = 0;

        prev_clock.translate(-chw, 0, l2, 1, 0);
        next_clock.translate(-chw, 0, l2, 1, 0);
        dot.translate(0, -ch, l5, 1, 0);

        wait(l2);

        prev_clock.translate(-chw, 0, l2, 1, 0);
        next_clock.translate(-chw, 0, l2, 1, 0);
        dot.translate(0, ch, l5, 1, 0);

        wait(l10);
        canUpdate = 1;
        prev_clock.translate(2*cw, 0);
        prev_clock.setPen(stall ? (type ? orangeClockPen : redClockPen) : greenClockPen)							
        wait(l5*2);

        Line t = next_clock;
        next_clock = prev_clock;
        prev_clock = t;

        if (stall)
            stall--;

    }

    //
    // Indicate that the next s clock cycles are extra ("stalled") cycles
    //
    function setStall(num s, num t) {
        stall = s;
        type = t;
        if (canUpdate)
            prev_clock.setPen(stall ? (type ? orangeClockPen : redClockPen) : greenClockPen);						
   }

}

// eof