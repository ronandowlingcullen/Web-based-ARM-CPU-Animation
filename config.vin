//
// config.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

//Run Test on register output of every instruction
const num testOps = 1;

const num WIDTH = 2200;
const num HEIGHT = 1080;
    

const num maxexample = 10;                           	
num example = 0;										// must be 0

setViewport(0, 0, WIDTH, HEIGHT, 1);

setBgBrush(whiteBrush);									

Font sFont = Font("Calibri", 20);
Font font = Font("Calibri", 22);							
Font fontST = Font("Calibri", 22, STRIKETHROUGH);		

// Layers
Layer valuesLayer = Layer(1, 3);
Layer inactivePipesLayer = Layer(2, 3);					
Layer activePipesLayer = Layer(3, 0);					
Layer helpLayer = Layer(5, 0);							

Brush bhighlight = SolidBrush(RED);						

//
// Schematic configuration
//
num lockCircuit = 0;

//
// Some constant definitions
//
const num NO_STALL = 0;
const num DATA_STALL = 1;
const num CTRL_STALL = 2;
const num MUL_STALL = 3;

const num PIPELINING_ENABLED = 0;
const num PIPELINING_DISABLED = 1;

const num BRANCH_PREDICTION = 0;
const num BRANCH_INTERLOCK = 1;
const num DELAYED_BRANCHES = 2;

const num LOAD_INTERLOCK = 0;
const num NO_LOAD_INTERLOCK = 1;

const num ALU_FORWARDING = 0;
const num ALU_INTERLOCK = 1;
const num NO_ALU_INTERLOCK = 2;

const num FORWARDING_TO_SMDR = 0;
const num STORE_INTERLOCK = 1;
const num NO_STORE_INTERLOCK = 2;

const num ZERO_FORWARDING = 0;
const num ZERO_INTERLOCK = 1;
const num NO_ZERO_INTERLOCK = 2;

//
// Global variables
//
num stall = NO_STALL;   // NO_STALL/DATA_STALL (leave the PC)/CTRL_STALL (update the PC)
num btbLast = 1;        // last accessed entry in the BTB
num updateBTB = 0;      // update the BTB on the next clock cycle

num peMode = 0;         // Pipeline enabled
num bpMode = 0;         // Branch prediction/branch interlock/delayed branches
num liMode = 0;         // Load interlock/No load interlock
num afMode = 0;         // ALU Forwarding/ALU Interlock/No ALU Interlock
num sfMode = 0;         // Forwarding to SMDR/Store Interlock/No Store Interlock
num zfMode = 0;         // Zero Forwarding/Zero Interlock/No Zero Interlock

//
// Running state
//
num locked = 0;         //
num instrCount = 0;     //
num tickCount = 0;      //

// eof