//
// config.vin
//
// Simulation of the DLX
// Written by Edsko de Vries, Summer 2003
//
// Copyright (C) 2003 - 2018 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

//Run Test on register output of every instruction
const num testOps = 1;

const num WIDTH = 2200;
const num HEIGHT = 1080;
    
//
// 0:   user defined                                	// joj
// 1:   multiplication                              	// joj
// 2:   pipeline forwarding                         	// joj
// 3:   branch prediction                           	// joj
// 4:   nops                                        	// joj
//
const num maxexample = 5;                           	// joj
num example = 0;										// joj - must be 0

setViewport(0, 0, WIDTH, HEIGHT, 1);
//setTPS(30);
//setSSParameters(0, 1024, 8);							// joj

setBgBrush(whiteBrush);									// {joj 7/10/16}

Font sFont = Font("Calibri", 20);
Font font = Font("Calibri", 22);							// {joj 18/12/16}
Font fontST = Font("Calibri", 22, STRIKETHROUGH);		// {joj 18/12/16}

// Layers
Layer valuesLayer = Layer(1, 3);
Layer inactivePipesLayer = Layer(2, 3);					// {joj 6/9/10}
Layer activePipesLayer = Layer(3, 0);					// {joj 6/9/10}
Layer helpLayer = Layer(5, 0);							// {joj 6/9/10}

Brush bhighlight = SolidBrush(RED);						// {joj 18/12/16}

//
// Schematic configuration
//
num lockCircuit = 0;

//
// Some constant definitions
//
const num NO_STALL = 0;
const num DATA_STALL = 1;
const num CTRL_STALL = 2;
const num MUL_STALL = 3;

const num PIPELINING_ENABLED = 0;
const num PIPELINING_DISABLED = 1;

const num BRANCH_PREDICTION = 0;
const num BRANCH_INTERLOCK = 1;
const num DELAYED_BRANCHES = 2;

const num LOAD_INTERLOCK = 0;
const num NO_LOAD_INTERLOCK = 1;

const num ALU_FORWARDING = 0;
const num ALU_INTERLOCK = 1;
const num NO_ALU_INTERLOCK = 2;

const num FORWARDING_TO_SMDR = 0;
const num STORE_INTERLOCK = 1;
const num NO_STORE_INTERLOCK = 2;

const num ZERO_FORWARDING = 0;
const num ZERO_INTERLOCK = 1;
const num NO_ZERO_INTERLOCK = 2;

//
// Global variables
//
num stall = NO_STALL;   // NO_STALL/DATA_STALL (leave the PC)/CTRL_STALL (update the PC)
num btbLast = 1;        // last accessed entry in the BTB
num updateBTB = 0;      // update the BTB on the next clock cycle

num peMode = 0;         // Pipeline enabled
num bpMode = 0;         // Branch prediction/branch interlock/delayed branches
num liMode = 0;         // Load interlock/No load interlock
num afMode = 0;         // ALU Forwarding/ALU Interlock/No ALU Interlock
num sfMode = 0;         // Forwarding to SMDR/Store Interlock/No Store Interlock
num zfMode = 0;         // Zero Forwarding/Zero Interlock/No Zero Interlock

//
// Running state
//
num locked = 0;         //
num instrCount = 0;     //
num tickCount = 0;      //

// eof