//
// buttonhandlers.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

function setlocked() {                      // joj
	num b_locked = locked || lockCircuit;   // joj
	buttonPE.showLocked(b_locked);          // joj
	buttonBP.showLocked(b_locked);          // joj
	buttonLI.showLocked(b_locked);          // joj
	buttonAF.showLocked(b_locked);          // joj
	buttonSF.showLocked(b_locked);          // joj
	buttonZF.showLocked(b_locked);          // joj
}                                           // joj

//
// run animation
//
// run until HALT instruction executed
//
function run() {
	wait(1);                                                                
	locked = 1;                                                            
	setlocked();                                                          
	while(1) {

		fork(animClock.clockCycle((peMode == PIPELINING_ENABLED)  ? 80 : 400));
		exec();
		if (((regWB.vIns == HALT) && (peMode == PIPELINING_ENABLED)) ||     
			((regID.vIns == HALT) && (peMode == PIPELINING_DISABLED))) {
			stop();                                                         
			if (haltOnHalt)													
				break;                                                      
		}                                                                   
		wait(1);                                                           	
	}
}

//
// pipeline enable
//
when buttonPE.label ~> eventMB(num down, num flags, num x, num y) {		
	if (down && (flags & MB_LEFT) && (!locked) && (!lockCircuit)) {
		setPEMode((peMode + 1)% 2);
		resetCircuit();
	}
	return 0;
}

//
// branch prediction
//
when buttonBP.label ~> eventMB(num down, num flags, num x, num y) {		
	if (down && (flags & MB_LEFT) && (!locked) && (!lockCircuit)) {
		setBPMode((bpMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// load interlocked
//
when buttonLI.label ~> eventMB(num down, num flags, num x, num y) {		
	if (down && (flags & MB_LEFT) && (!locked) && (!lockCircuit)) {
		setLIMode((liMode + 1) % 2);
		resetCircuit();
	}
	return 0;
}

//
// ALU forwarding
//
when buttonAF.label ~> eventMB(num down, num flags, num x, num y) {		
	if (down && (flags & MB_LEFT) && (!locked) && (!lockCircuit)) {
		setAFMode((afMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// store forwarding
//
when buttonSF.label ~> eventMB(num down, num flags, num, num) {			
	if (down && (flags & MB_LEFT) && (!locked) && (!lockCircuit)) {
		setSFMode((sfMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// zero forwarding
//
when buttonZF.label ~> eventMB(num down, num flags, num, num) {			
	if (down && (flags & MB_LEFT) && (!locked) && (!lockCircuit)) {
		setZFMode((zfMode + 1) % 3);
		resetCircuit();
	}
	return 0;
}

//
// save configuration
//
// NB: generating unnecessary quotes for compatibilty with previous versions
//
when buttonSP.label ~> eventMB(num down, num flags, num x, num y) {		
	if (down && (flags & MB_LEFT)) {
		

		num lp1, opcode, reg;
		Instruction instr;

        string s = "saveanim.php?state=";      

        for (lp1 = 0; lp1 < 32; lp1++) {
            instr = im.instruction[lp1];
            opcode = (instr.vIns << 24) | (instr.vRdt << 16) | (instr.vRs1 << 8) | (instr.vRs2);
            s = sprintf("%si%d='0x%08X' ", s, lp1, opcode); 
        }

        for (lp1 = 0; lp1 < 4; lp1++) {
            reg = regFile[lp1].value;
            s = sprintf("%sr%d='0x%02X' ", s, lp1, reg); 
        }

        for (lp1 = 0; lp1 < 4; lp1++) {
            reg = memory[lp1].value;
            s = sprintf("%sm%d='0x%02X' ", s, lp1, reg); 
        }

        s = sprintf("%speMode='%d' bpMode='%d' liMode='%d' afMode='%d' sfMode='%d' zfMode='%d'", s, peMode, bpMode, liMode, afMode, sfMode, zfMode);
		getURL(s);

	}
	return 0;
}

//
// Vivio logo
//
when logo ~> eventMB(num down, num flags, num x, num y) {				
     if (down && (flags & MB_LEFT))
         getURL("https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/vivio.htm");
     return 0;
}

//
// load program from database
//
when title ~> eventMB(num down, num flags, num, num) {              	
    if (down && (flags & MB_LEFT))
        getURL("showanim.php");
}

//
// change initial builtin program and reset
//
when imLabel ~> eventEE(num enter, num x, num y) {						
	imLabel.setBrush(enter? gray192Brush : whiteBrush);					
	imLabel.setTxtPen(enter ? redPen : blackPen);
	return 0;
}

when imLabel ~> eventMB(num down, num flags, num x, num y) {			
	if (down && (flags & MB_LEFT)) {
		example = (example == maxexample) ? 0 : example + 1;
		setArg("example", example.toString());							
		reset();
	}
	return 0;
}

run();																	

// eof