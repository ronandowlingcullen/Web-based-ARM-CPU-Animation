//
// alu.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

class ALU(num x, num y, num w, num h) {

    Polygon alu = Polygon(0, ABSOLUTE, blackPen, componentBrush,
            x, y,
            0, 0,
            w, h / 4,
            w, 3 * h / 4,
            0, h,
            0, 5 * h / 8,
            w / 2, h / 2,
            0, 3 * h / 8);

    Rectangle2(0, 0, 0, 0, x, y-10, w, 10, 0, componentFont, "ALU");

    string op = "";
    Rectangle txtOp = Rectangle(valuesLayer, 0, 0, redBrush, x, y+h/2, 0, -h/12, 2*w/3, h/6, whitePen, componentFont, op);
    txtOp.setOpacity(0);
	txtOp.setRounded(2, 2);

    Rectangle txtResult = Rectangle(activePipesLayer, 0, blackPen, yellowBrush, x+3*w/4, y+h/2, 0, -h/12, w/2, h/6, blackPen, componentFont);
    txtResult.setOpacity(0);
	txtResult.setRounded(2, 2);

    //
    // setTxtOp
    //
    function setTxtOp(num vIns) {

        op = "";

		if(vIns >= ADD && vIns <= BIC){
			op = instrNames[vIns];
		} else if(vIns >= ADDi && vIns <= RSCi ){ //Quick way to get instruction names for simple instruction on ALU
			op = instrNames[vIns-15];
		} else if(vIns >= ANDi && vIns <= BICi ){ //Quick way to get instruction names for simple instruction on ALU (one less away as no MULi instr)
			op = instrNames[vIns-14];
		} else if(vIns >= LSL && vIns <= ROR){
			//Set Barrel Shifter Op
		} else if(vIns >= LSLi && vIns <= RORi){
			//Set Barrel Shifter Op
		} else if(vIns == CMN || vIns == CMNi){
			op = "ADD";
		} else if(vIns == CMP || vIns == CMPi){
			op = "SUB";
		} else if(vIns == MVN || vIns == MVNi){
			op = "XOR";
		} else if(vIns == LDR || vIns == STR) {
			op = "ADD";
		}

        txtOp.setTxt(op);
        txtOp.setOpacity(1);

    }

}

// eof