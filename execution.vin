//
// execution.vin
//
// Simulation of the DLX
// Written by Edsko de Vries, Summer 2003
//
// Copyright (C) 2003 - 2018 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

AnimPipe mux1Src, mux3Src, mux4Src;

num blockingCond = 0;			//Indicates conditional unexecution
num zero;																		// {joj 3/11/12}
num newPC;																		// {joj 3/11/12}
//num branchMissPredict;														// {joj 4/11/12}
AnimPipe newMux1Src;															// {joj 9/12/16}

num mulStall = 0;

//
// index for tag or -1 if none
//
num function btbIndex(num pc) {
    for (num lp1 = 0; lp1 < 2; lp1++)
        if (btbPC[lp1].value == pc)                                             // {joj 1/2/06}
            return lp1;
    return -1;
}

//
// ifExec
//
// 80 ticks per clock cycle (40 + 40)
// 
function ifExec() {																// {joj 24/9/17}


	if ((stall == NO_STALL) || (stall == CTRL_STALL)) {
        fork(regPC.update());
        fork(regFile[15].update());
        im.setActive(regPC.newValue);
    }

	

	wait(8);
	
	if (instrIsBranch(regID.vIns) && (regID.vCond != def) && ((regEX.vSBit == "S") || (regEX.vIns >= CMN && regEX.vIns <= TSTi))) {
	} else {
    //
    // look for PC is branch target buffer
    //
    if ((bpMode == BRANCH_PREDICTION) && (btbIndex(regPC.value) != -1)) {
        btbLast = btbIndex(regPC.value);
        regPC.setNewValue(btbPPC[btbLast].value);                               // {joj 1/2/06}
        mux1Src = apBTB_MUX1;
    } else {
        regPC.setNewValue((regPC.value + 4) & 0x7F);
        mux1Src = apADD4_MUX1;
    }

	}

	//Update PC visualised as R15 in register file
	regFile[15].setNewValue(regPC.newValue);

    regPC1.setNewValue(regPC.value);
    regID.setNewInstruction(im.instruction[regPC.value / 4]);

	//Convert shift ops to move ops
	if((regID.vIns >= LSL && regID.vIns <= ROR) || (regID.vIns >= LSLi && regID.vIns <= RORi)){
		regID.vIns2 = regID.vIns;
		regID.vIns = MOV;
		regID.vRs3 = regID.vRs2;
		regID.vRs2 = regID.vRs1;
	}

    wait(8);

	fork(apPC_PC1.animate(64));
 	fork(apPC_IM.animate(24));
   	fork(apPC_ADD4.animate(24));

    if ((bpMode == BRANCH_PREDICTION) && (instrIsBranch(regID.vIns))) {	// {joj 1/2/06}
		if (stall == CTRL_STALL) {												// {joj 3/11/12}
			apPC_MUX2.animate(12);												// {joj 3/11/12}
		} else {																// {joj 3/11/12}
        	apPC1_MUX2.animate(12);												// {joj 3/11/12}
		}
        apMUX2_BTB.animate(12);
    } else {
        wait(24);
    }

    //
    // Second half of the clock cycle
    //
    fork(apIM_ID.animate(40));

    if ((bpMode == BRANCH_PREDICTION) && (btbIndex(regPC.value) != -1)) {
        btbPC[btbIndex(regPC.value)].highlight(bhighlight);                    // {joj 1/2/06}
        btbPPC[btbIndex(regPC.value)].highlight(bhighlight);                   // {joj 1/2/06}
    }

    txtIM_ID.setTxt(regID.getNewInstrTxt());                                    // {joj 29/10/06}
    txtIM_ID.setOpacity(1, 16, 1, 1);                                           // {joj 29/10/06}

    mux1Src.animate(16);
    apMUX1_PC.animate(8);

}

//
// set mux1Src, mux3Src and regPC.newValue and values for BTB if necessary
//
function calcNewPC() {

   // AnimPipe newMux1Src;

    if (instrIsBranch(regID.vIns)){
		newPC = regPC1.value + 4;
		if((regID.vCond == def) || ((regEX.vSBit != "S") && (regEX.vIns <= CMN || regEX.vIns >= TSTi))) {
		// Stall to allow for condition branching on instruction one step ahead
        	// conditional branch
			//Pen pen = (stall == NO_STALL) ? controlHLPen : controlPen;	// {joj 4/11/12}
			Pen pen = controlHLPen;	// {joj 8/12/16}



			//RDC's implementation
			mux3Src = apADDi_MUX3;
    		mux4Src = apMUX3_MUX4;
		
			if(testCondition(regID.vCond)){
				if(regID.vIns == B || regID.vIns == BL) {
    				newPC = (regPC1.value + regID.vRs2) & 0x7F;
				}
			} else {
				newPC = regPC1.value + 4;
			}
    		newMux1Src = apMUX3_MUX1;

  		}

	}


	
}

function updBTB() {

	//branchMissPredict = 0;

	if (newPC != regPC.value) {

        //branchMissPredict = 1;

		regPC.setNewValue(newPC);
		regFile[15].setNewValue(newPC);		// Update PC in regfile
        mux1Src = newMux1Src;

        //
        // update branch target buffer
        //
        if (bpMode == BRANCH_PREDICTION) {

            //
            // remove "branch" entry if branch doesn't branch
            //
            if (newPC == regPC1.value + 4) {                        // {joj 1/11/06}

                if (btbIndex(regPC1.value) >= 0)                    // {joj 1/11/06}
                    btbPC[btbIndex(regPC1.value)].setInvalid(1);    // {joj 1/11/06}

            } else {

                //
                // re-use entry if present
                //
                if (btbIndex(regPC1.value) >= 0)					// {joj 1/11/06}
                    btbLast = btbIndex(regPC1.value)       	        // {joj 1/11/06}
                else
                    btbLast = (btbLast) ? 0 : 1;                    // {joj 1/2/06}

                btbPC[btbLast].setNewValue(regPC1.value);           // {joj 1/2/06}
                btbPC[btbLast].setInvalid(0);                       // {joj 1/2/06}
                btbPC[btbLast].useTag = 0;                          // {joj 1/2/06}
                btbPPC[btbLast].setNewValue(newPC);                 // {joj 1/2/06}

            }

        }

    }

}

//
// detectStall
//
function detectStall() {

    stall = NO_STALL;
    updateBTB = 0;

    // RAW hazards
    if (afMode == ALU_INTERLOCK) {

        if (instrOpTypeRdt(regEX.vIns) == OP_TYPE_REG) {
            if ((instrOpTypeRs1(regID.vIns) == OP_TYPE_REG) && (regID.vRs1 == regEX.vRdt))
                stall = DATA_STALL;
            if ((instrOpTypeRs2(regID.vIns) == OP_TYPE_REG) && (regID.vRs2 == regEX.vRdt))
                stall = DATA_STALL;
        }

        if (instrOpTypeRdt(regMA.vIns) == OP_TYPE_REG) {
            if ((instrOpTypeRs1(regID.vIns) == OP_TYPE_REG) && (regID.vRs1 == regMA.vRdt))
                stall = DATA_STALL;
            if ((instrOpTypeRs2(regID.vIns) == OP_TYPE_REG) && (regID.vRs2 == regMA.vRdt))
                stall = DATA_STALL;
        }

    }

    // RAW hazards (stores)
    //if ((sfMode == STORE_INTERLOCK) && (regID.vIns == ST)) {        // {joj}
    if ((sfMode == STORE_INTERLOCK) && (regID.vIns == STR || regID.vIns == STR)) {        // {joj}

        //
        // NB: ST stores the value of Rdt into memory (Rs1 and Rs2 are used to specify the memory address)
        //
        if ((instrOpTypeRdt(regEX.vIns) == OP_TYPE_REG) && (regEX.vRdt == regID.vRdt))
            stall = DATA_STALL;
        if ((instrOpTypeRdt(regMA.vIns) == OP_TYPE_REG) && (regMA.vRdt == regID.vRdt))
            stall = DATA_STALL;

    }


    // Load hazards
    //if ((liMode == LOAD_INTERLOCK) && (regEX.vIns == LD)) {     // {joj}
    if ((liMode == LOAD_INTERLOCK) && (regEX.vIns == LDR || regEX.vIns == LDRi)) {     // {joj}
        if ((instrOpTypeRs1(regID.vIns) == OP_TYPE_REG) && (regID.vRs1 == regEX.vRdt))
            stall = DATA_STALL;
        if ((instrOpTypeRs2(regID.vIns) == OP_TYPE_REG) && (regID.vRs2 == regEX.vRdt))
            stall = DATA_STALL;
    }

	//Dealling with Multiplication Stalls
	
	//Dealing with stalls due to MUL
	if (stall == NO_STALL && mulStall == 0 && (regID.vIns == MUL)) {
		//Based on 8 bit Booth's algorithm calculate the number of stalls needed
		num Rm = regFile[regID.vRs1].value;
		num Rs = regFile[regID.vRs2].value

		if((Rm == 0xFF || Rm  == 0x00)
		&& (Rs == 0xFF || Rs  == 0x00)) {
			mulStall = 0;
		} else {
			mulStall = 1;
		}
	} else if (mulStall > 0){
		mulStall--;
		stall = MUL_STALL;
	}


    // control hazards (real detection for control hazards is done in calcNewPC)
    //if ((stall == NO_STALL) && (bpMode != DELAYED_BRANCHES) && instrIsBranchOrJump(regID.vIns) && branchMissPredict) {	// {joj 1/2/06}
	if ((stall == NO_STALL) && instrIsBranch(regID.vIns) && (newPC != regPC.value)) {	// {joj 9/12/16}
		if (bpMode == BRANCH_PREDICTION) {
			updateBTB = 1;
		} else if (bpMode == BRANCH_INTERLOCK) {
        	stall = CTRL_STALL;
		}
    }

	// Stall to allow for condition branching on instruction one step ahead
	if ((stall == NO_STALL) && instrIsBranch(regID.vIns) && (regID.vCond != def) && ((regEX.vSBit == "S") || (regEX.vIns >= CMN && regEX.vIns <= TSTi))) {
		stall = CTRL_STALL;
    }

	
    if (stall == DATA_STALL) {
        animClock.setStall(1, 0);
    } else if (stall == CTRL_STALL) {
        animClock.setStall(1, 1);
    }	

}

function sendBTBOperands() {	// {joj 14/11/17}
    mux4Src.animate(18);		// {joj 3/11/12}
    apMUX4_BTB.animate(6);		// {joj 3/11/12}
}

//
// idExec
//
function idExec() {																// {joj 14/11/17}

    if (stall == NO_STALL) {
    	fork(regPC1.update());									
        fork(regID.update());
    }

    if (updateBTB && (bpMode == BRANCH_PREDICTION))	{							// {joj 3/11/12}
        fork(btbPC[btbLast].update());											// {joj 1/2/06}
        fork(btbPPC[btbLast].update());											// {joj 1/2/06}
    }

	

    wait(16);

    fork(apID_EX.animate(64));

	
	if(instrIsBranch(regID.vIns)) {
		
		if (regID.vIns == BL) {												
			regB.setNewValue(regPC1.value);                        			
		}
		
		if((regID.vCond == def) || ((regEX.vSBit != "S") && (regEX.vIns <= CMN || regEX.vIns >= TSTi))) {
		
			fork(apPC1_ADDi.animate(16));                          				// {joj 4/11/12}
        	fork(apID_ADDi.animate(16));                           				// {joj 4/11/12}
        	wait(12);                                           				// {joj 4/11/12}
        	txtID_ADDi.setTxt("%02X", regID.vRs1);                      		// {joj 4/11/12}
        	txtID_ADDi.setOpacity(1);                                 			// {joj 4/11/12}
        	wait(4);                                                   			// {joj 4/11/12}
			fork(apADDi_MUX3.animate(8));                                  		// {joj 4/11/12}
			txtADDi_MUX3.setTxt("%02X", (regPC1.value + regID.vRs1) & 0xff);	// {joj 4/11/12}
        	txtADDi_MUX3.setOpacity(1, 8, 1, 0);          						// {joj 4/11/12}
			//Animate blocking/allowing write if condition
			if(regID.vCond != def) {
				if(testCondition(regID.vCond)) {
					conditionMuxB.setPen(controlMuxHLPen);
				} else {
					conditionMuxB.setPen(muxPen);
				}
				cpsrEXB.setPen(controlHLPen);

				if(!cpsr0.invalid){
					cpsrOUT0B.setPen(controlHLPen);
				} else if (!cpsr1.invalid){
					cpsrOUT1B.setPen(controlHLPen);
				} else {
					cpsrCPSRB.setPen(controlHLPen);
				}
			}
		
		} else {																// {joj 4/11/12}
		
			wait(24);															// {joj 4/11/12}
			
		}																		// {joj 4/11/12}
		
    } else {

        wait(24);

    };
	
    wait(9); // register file now updated {joj 4/11/12}
    
    //
    // second half of the clock cycle
    //


	if (instrIsBranch(regID.vIns)) {	
        calcNewPC();

		if(((regID.vCond == def) || ((regEX.vSBit != "S") && (regEX.vIns <= CMN || regEX.vIns >= TSTi))) && testCondition(regID.vCond)) {
			txtMUX3_MUX4.setTxt("%02X", newPC); 									// {joj 3/11/12}
			txtMUX3_MUX4.setOpacity(1, 8, 1, 0);                           			// {joj 3/11/12}
       		fork(sendBTBOperands());
		}
	}
	
    detectStall();
	//debug("stall=%d", stall);
	if (instrIsBranch(regID.vIns) && (stall != DATA_STALL))				// {joj 10/12/16}
		updBTB();																// {joj 9/12/16}

    if (stall == NO_STALL || stall == MUL_STALL) {
        regEX.setNewValue(regID.vIns, regID.vSBit, regID.vCond, regID.vRdt, regID.vRs1, regID.vRs2, regID.vIns2, regID.vRs3);
    } else {
        regEX.setNewValue(STALL, " ", 0, 0, 0, 0, STALL, 0);
    }
    
    wait(7);																	// {joj 4/11/12}

    // Send source registers to A and B
    if ((instrOpTypeRdt(regID.vIns) == OP_TYPE_REG || instrHasNoDstRR(regID.vIns) || instrHasNoDstRI(regID.vIns)) && (regID.vIns != B) && (regEX.vIns != MUL || stall != MUL_STALL)){//!instrIsBranch(regID.vIns)) { //Rdt is type reg or it's a compare instruction
		
        if(instrOpTypeRs1(regID.vRs1) != OP_TYPE_IMM)
			regFile[regID.vRs1].highlight(bhighlight);                             // {joj}
        if(instrOpTypeRs1(regID.vIns) != OP_TYPE_UNUSED)	//Don't set if not in use
			regA.setNewValue(regFile[regID.vRs1].value);

        // decision facilitated by the opcode format and does not need a MUX
        if (instrOpTypeRs2(regID.vIns) == OP_TYPE_REG) {
            regFile[regID.vRs2].highlight(bhighlight);                         // {joj}
            regB.setNewValue(regFile[regID.vRs2].value);
        } else if (regID.vIns != BL) {
            if(instrOpTypeRdt(regID.vRdt) != OP_TYPE_UNUSED)
				regFile[regID.vRdt].highlight(bhighlight);                         // {joj}
            regB.setNewValue(regFile[regID.vRdt].value);
        }

		if(instrOpTypeRs1(regID.vIns) != OP_TYPE_UNUSED) {	//Don't animate if not in use
           	txtRF_A.setTxt("R%d:%02X", regID.vRs1, regFile[regID.vRs1].value);      // {joj 29/10/06}
           	txtRF_A.setOpacity(1);													// {joj}
			fork(apRF_A.animate(24));
		}
			

        //
        // read Register file B port
        // don't read if immediate addressing
        // don't read if LD
        // read destination register if ST
        // otherwise read source 2 register
        //
        if ((!instrIsArRI(regID.vIns)) && (regID.vIns != LDR &&  regID.vIns != LDRi) && (!instrHasNoOp1RI(regID.vIns))) { 
            num vr = (regID.vIns == STR || regID.vIns == STRi) ? regID.vRdt : regID.vRs2;  // {joj 28/10/06}
            if(regID.vIns == BL) {
				apPC1_MUX5.animate(18);                               		
               	apMUX5_B.animate(6);
			} else if(instrOpTypeRs2(regID.vIns) != OP_TYPE_UNUSED) {	//Don't animate if not in use
				txtRF_MUX5.setTxt("R%d:%02X", vr, regFile[vr].value);   // {joj 29/10/06}
                txtRF_MUX5.setOpacity(1);								// {joj}
              	apRF_MUX5.animate(18);                             		// {joj}
               	apMUX5_B.animate(6);
			}
		}


			


    }


	//Flush regID if Branch Instr and not conditionally unexecuted
	//if(instrIsBranch(regID.vIns) && testCondition(regID.vCond)){
		//if(bpMode == BRANCH_PREDICTION){
			//regID.setNewValue(STALL, " ", 0, 0, 0, 0, STALL, 0);
		//}
	//}

	//Flush regID if Branch Instr and not conditionally unexecuted
	if(instrIsBranch(regID.vIns)){
		if(bpMode == BRANCH_PREDICTION){
			if((btbIndex(regPC1.value) != -1) && !testCondition(regID.vCond)){
				regID.setNewValue(STALL, " ", 0, 0, 0, 0, STALL, 0);
			}
			if((btbIndex(regPC1.value) == -1) && testCondition(regID.vCond)){
				regID.setNewValue(STALL, " ", 0, 0, 0, 0, STALL, 0);
			}
		}
	}
	

}

//
// exExec
//
function exExec() {														// {joj 14/11/17}

    AnimPipe mux6Src, mux7Src, mux8Src;
    num op1, op2, op3;
	


	if (stall != MUL_STALL) {
		
    	fork(regEX.update());
    }

	if (!instrIsNop(regEX.nIns)) {
        fork(regA.update());
        fork(regB.update());
    }
	
	

    wait(8);

    regMA.setNewValue(regEX.vIns, regEX.vSBit, regEX.vCond, regEX.vRdt, regEX.vRs1, regEX.vRs2, regEX.vIns2, regEX.vRs3);

    if (instrOpTypeRdt(regEX.vIns) == OP_TYPE_REG || instrHasNoDstRR(regEX.vIns) || instrHasNoDstRI(regEX.vIns)) { //Rdt is type reg or it's a compare instruction

        // select correct source for operand 1
		if (afMode == ALU_FORWARDING) {

            if (regOUT0.tagMatches(regEX.vRs1)) {
                mux6Src = apOUT0_MUX6;
                op1 = regOUT0.value;
            } else if (regOUT1.tagMatches(regEX.vRs1)) {
                mux6Src = apOUT1_MUX6;
                op1 = regOUT1.value;
            } else {
                mux6Src = apA_MUX6;
                op1 = regA.value;
            }

        } else if(regEX.vIns != B && regEX.vIns != BL) {

            mux6Src = apA_MUX6;
            op1 = regA.value;

        }

        // Choose correct source for operand 2
		if(regEX.vIns == BL) {
			mux7Src = apB_MUX7;
            op2 = regB.value;

		} else if (instrOpTypeRs2(regEX.vIns) == OP_TYPE_IMM && !instrIsBranch(regEX.vIns)) {

            mux7Src = apEX_MUX7;
            op2 = regEX.vRs2;

        } else if (afMode == ALU_FORWARDING && regEX.vIns != BL) {	//If it's BL op2 <- regB (the address of the BL instruction)

            if (regOUT0.tagMatches(regEX.vRs2)) {
                mux7Src = apOUT0_MUX7;
                op2 = regOUT0.value;
            } else if (regOUT1.tagMatches(regEX.vRs2)) {
                mux7Src = apOUT1_MUX7;
                op2 = regOUT1.value;
            } else {
                mux7Src = apB_MUX7;
                op2 = regB.value;
            }

        } else {

            mux7Src = apB_MUX7;
            op2 = regB.value;

        }

		// Choose correct source for operand 3
		if (instrOpTypeRs3(regEX.vIns,regEX.vIns2) == OP_TYPE_IMM) {

            //mux7Src = apEX_MUX7;
            op3 = regEX.vRs3;

        } else if (afMode == ALU_FORWARDING && regEX.vIns != BL) {	//If it's BL op2 <- regB (the address of the BL instruction)

            if (regOUT0.tagMatches(regEX.vRs3)) {
                //mux7Src = apOUT0_MUX7;
                op3 = regOUT0.value;
            } else if (regOUT1.tagMatches(regEX.vRs3)) {
                //mux7Src = apOUT1_MUX7;
                op3 = regOUT1.value;
            } else {
                //mux7Src = apB_MUX7;
                op3 = regFile[regEX.vRs3].value;
            }

        } else {

            mux7Src = apB_MUX7;
            op3 = regFile[regEX.vRs3].value;

        }
		
        num result = instrExecute(regEX.vIns, regEX.vSBit, regEX.vCond, op1, op2, regEX.vIns2, op3, cpsr.n, cpsr.z, cpsr.c, cpsr.v);

        // R0 is always 0
        //if (regEX.vRdt == 0)
        //    result = 0;

		
		
        

        if (instrIsLoadOrStore(regEX.vIns)) {
            regOUT0.setNewTag(-1);				// OUT0 contains the EA, tag should be -1
        } else if (regEX.vIns == BL) {
			regOUT0.setNewTag(14);		//If its a branch and link instruction tag it as LR
		} else {
            regOUT0.setNewTag(regEX.vRdt);
		}

		//If condition fails result is old value of Rd
		if (testCondition(regEX.vCond)) {
			regOUT0.setNewValue(result);
		} else {
			regOUT0.setNewTag(-2);
		}

		//Dealing with early output on MUL Stall
		if(mulStall > 0){
			regOUT0.setNewTag(-1);
		}
			

        //regOUT0.setInvalid(0);								

    } //else if (regEX.vIns == NOP || !testCondition(regEX.vCond)) {
		//regOUT0.setInvalid(1);
	//}

    // For stores, send correct operand to SMDR
    //if (regEX.vIns == ST) {  // {joj}
    if ((regEX.vIns == STR || regEX.vIns == STRi)) {  // {joj}
        if (sfMode == FORWARDING_TO_SMDR) {
            if (regOUT0.tagMatches(regEX.vRdt)) {
                mux8Src = apOUT0_MUX8;
                regSMDR.setNewValue(regOUT0.value);
            } else if (regOUT1.tagMatches(regEX.vRdt)) {
                mux8Src = apOUT1_MUX8;
                regSMDR.setNewValue(regOUT1.value);
            } else {
                mux8Src = apB_MUX8;
                regSMDR.setNewValue(regFile[regEX.vRdt].value);
            }
        } else {
            mux8Src = apB_MUX8;
            regSMDR.setNewValue(regFile[regEX.vRdt].value);
        }
    }

    wait(8);

    fork(apEX_MA.animate(64));

    //if (regEX.vIns == ST)                                           // {joj}
    if ((regEX.vIns == STR || regEX.vIns == STRi))    {   
        fork(mux8Src.animate(24));
		//Deal with barrel shift ops
		if(regEX.vIns2 != NOP){
			if(instrIsShI(regEX.vIns2)){
				//fork(apEX_BS.animate(24));
				txtEX_BS.setTxt("%02X", op3); 
			} else {
				//fork(apRF_BS.animate(24));
				txtRF_BS.setTxt("R%d:%02X", regEX.vRs3, regFile[regEX.vRs3].value);
				txtRF_BS.setOpacity(1);
			}
		}
	}

    if ((instrOpTypeRdt(regEX.vIns) == OP_TYPE_REG || instrHasNoDstRR(regEX.vIns) || instrHasNoDstRI(regEX.vIns)) && regEX.vIns != STALL && regEX.vIns != B) { //Rdt is type reg or it's a compare instruction
        if (mux6Src != 0 && (instrOpTypeRs1(regEX.vIns) != OP_TYPE_UNUSED))
            fork(mux6Src.animate(24));
        if (mux7Src == apEX_MUX7) {                                 // {joj 29/10/06}
            txtEX_MUX7.setTxt("%02X", op2);                         // {joj 29/10/06}
            txtEX_MUX7.setOpacity(1);                             	// {joj 29/10/06}
        }  
		if(instrOpTypeRs2(regEX.vIns) != OP_TYPE_UNUSED)  
			fork(mux7Src.animate(24));

		//Deal with barrel shift ops
		if(regEX.vIns2 != NOP){
			if(instrIsShI(regEX.vIns2)){
				fork(apEX_BS.animate(24));
				txtEX_BS.setTxt("%02X", op3); 
			} else {
				fork(apRF_BS.animate(24));
				txtRF_BS.setTxt("R%d:%02X", regEX.vRs3, regFile[regEX.vRs3].value);
				txtRF_BS.setOpacity(1);
			}
		} 

    }

    wait(12);
	//Delay visualising Immediate value from EX  to wait for animPipe
	if(regEX.vIns2 != NOP){
		if(instrIsShI(regEX.vIns2)){
			txtEX_BS.setOpacity(1);
		}
	}
	wait(12);

    //
    // Second half of the clock cycle
    //

    //if (regEX.vIns == ST)                                           // {joj}
    if ((regEX.vIns == STR || regEX.vIns == STRi))                                           // {joj}
        fork(apMUX8_SMDR.animate(40));                         		// {joj 1/2/06}

    if (((instrOpTypeRdt(regEX.vIns) == OP_TYPE_REG || instrHasNoDstRR(regEX.vIns) || instrHasNoDstRI(regEX.vIns))) && regEX.vIns != STALL && regEX.vIns != B) { //Rdt is type reg or it's a compare instruction

        alu.setTxtOp(regEX.vIns);

        if (mux6Src != 0 && (instrOpTypeRs1(regEX.vIns) != OP_TYPE_UNUSED))
            fork(apMUX6_OUT0.animate(40));   

		if(instrOpTypeRs2(regEX.vIns) != OP_TYPE_UNUSED) 
        	fork(apMUX7_OUT0.animate(40)); 
		
		                      
        
		wait(20);
        
		if(regEX.vIns != MUL || stall != MUL_STALL) {

			alu.txtResult.setTxt("%02X", result);
    	    alu.txtResult.setOpacity(1, 20, 1, 0);

		}

		//Animate blocking/allowing write if condition
		if(regEX.vCond != def && testCondition(regEX.vCond) && !instrIsBranch(regEX.vIns)) {
			conditionMux.setPen(controlMuxHLPen);
			cpsrEX.setPen(controlHLPen);

			if(!cpsr0.invalid){
				cpsrOUT0.setPen(controlHLPen);
			} else if (!cpsr1.invalid){
				cpsrOUT1.setPen(controlHLPen);
			} else {
				cpsrCPSR.setPen(controlHLPen);
			}
		}

    }

	

	//Set Validity of regOUT0
    if ((instrOpTypeRdt(regEX.vIns) == OP_TYPE_REG || instrHasNoDstRR(regEX.vIns) || instrHasNoDstRI(regEX.vIns)) && (regEX.vIns != B) && !(regEX.vIns >= CMN && regEX.vIns <= TSTi))   {
		regOUT0.setInvalid(0);								

    } else if (regEX.vIns == NOP || !testCondition(regEX.vCond) || regEX.vIns == B || regEX.vIns == STALL || (regEX.vIns >= CMN && regEX.vIns <= TSTi)) {
		regOUT0.setInvalid(1);
		regOUT0.setNewTag(-1);
		regOUT0.setNewValue(0);
	}
	
	
		
	if ((regEX.vIns == NOP || !testCondition(regEX.vCond)) && !instrIsBranch(regEX.vIns)) {	//Delay updating label for better visualisation
		
		if(regEX.vCond != def) {
			blockingCond = 1;
		}
		//Animate blocking write if condition
		if(blockingCond) {
			conditionMux.setPen(muxPen);
			cpsrEX.setPen(controlHLPen);
			if(!cpsr0.invalid){
				cpsrOUT0.setPen(controlHLPen);
			} else if (!cpsr1.invalid){
				cpsrOUT1.setPen(controlHLPen);
			} else {
				cpsrCPSR.setPen(controlHLPen);
			}
			blockingCond = 0;
		}
		wait(40);
		regOUT0.updateLabel();
	}


}

//
// maExec - Memory Access phase
//
function maExec() {													// {joj 14/11/17}


	if(stall == MUL_STALL) {	//Stall ahead of MUL op
		regMA.setNewValue(STALL, " ", 0, 0, 0, 0, STALL, 0);
	}

	//Check for coditional nonexecution
	if(regOUT0.tag == -2) {
		regOUT1.setNewTag(-2);
	}
	
	
	fork(regMA.update());

	

    if (instrOpTypeRdt(regMA.nIns) == OP_TYPE_REG || instrHasNoDstRR(regMA.vIns) || instrHasNoDstRI(regMA.vIns) || regEX.vIns == BL) { //Rdt is type reg or it's a compare instruction
        fork(regOUT0.update());
	}

	wait(1);

	//Update CPSR0 if S set or comparison instruction
	if((regMA.vSBit == "S") || (regMA.vIns >= CMN && regMA.vIns <= TST) || (regMA.vIns >= CMNi && regMA.vIns <= TSTi)){
		cpsr0.update();
	} else {
		cpsr0.setInvalid(1);
	}

	

	
	
		

    //if (regMA.nIns == ST) // {joj}
    if (regMA.nIns == STR || regMA.nIns == STRi) // {joj}
        fork(regSMDR.update());

    wait(7);

    regWB.setNewValue(regMA.vIns, regMA.vSBit, regMA.vCond, regMA.vRdt, regMA.vRs1, regMA.vRs2, regMA.vIns2, regMA.vRs3);

    //if ((instrOpTypeRdt(regMA.vIns) == OP_TYPE_REG) && (regMA.vIns != ST)) {  // {joj}
    if ((instrOpTypeRdt(regMA.vIns) == OP_TYPE_REG || instrHasNoDstRR(regMA.vIns) || instrHasNoDstRI(regMA.vIns) || regEX.vIns == BL) && (regMA.vIns != STR)&& (regMA.vIns != STRi)) {  // {joj}

        //if (regMA.vIns == LD) {   // {joj}
        if ((regMA.vIns == LDR) || (regMA.vIns == LDRi)) {   // {joj}
            regOUT1.setNewValue(memory[(regOUT0.value / 4) % 16].value);
			if(regOUT1.tag != -2) {
            	regOUT1.setNewTag(regMA.vRdt);
			}
        } else {

            regOUT1.setNewValue(regOUT0.value);
            regOUT1.setNewTag(regOUT0.tag);
        }

        regOUT1.setInvalid(0);

    }

    wait(8);

    fork(apMA_WB.animate(64));
    //if (regMA.vIns == ST) {                                         // {joj}
    if ((regMA.vIns == STR || regMA.vIns == STRi) && (regOUT0.tag != -2)) {                                         // {joj}
		
		
        memory[(regOUT0.value / 4) % 16].setNewValue(regSMDR.value);
        fork(apSMDR_Mem.animate(24));                          		// {joj 1/2/06}
        apOUT0_Mem.animate(24);
        memory[(regOUT0.value / 4) % 16].doubleUpdate(stack[((regOUT0.value / 4) % 16) -8]);

    } else if (instrOpTypeRdt(regMA.vIns) == OP_TYPE_REG || instrHasNoDstRR(regMA.vIns) || instrHasNoDstRI(regMA.vIns) || regEX.vIns == BL) { //Rdt is type reg or it's a compare instruction

        //if (regMA.vIns == LD) {                                     // {joj}
        if ((regMA.vIns == LDR || regMA.vIns == LDRi) && (regOUT0.tag != -2)) {                                     // {joj}
            apOUT0_Mem.animate(24);
            memory[(regOUT0.value / 4) % 16].highlight(bhighlight);		// {joj}
            apMem_MUX9.animate(24);
        } else {
            apOUT0_MUX9.animate(48);
        }
        apMUX9_OUT1.animate(16);

    }

	if (regMA.vIns == NOP || !testCondition(regMA.vCond)) {	//Delay updating label for better visualisation
		wait(64);
		regOUT1.setInvalid(1);	
		regOUT1.updateLabel();	
	}

	//Pass CPSR0 to CPSR1 if S set or comparison instruction
	if((regMA.vSBit == "S") || (regMA.vIns >= CMN && regMA.vIns <= TST) || (regMA.vIns >= CMNi && regMA.vIns <= TSTi)){
		cpsr1.setNNValue(cpsr0.n);
		cpsr1.setNZValue(cpsr0.z);
		cpsr1.setNCValue(cpsr0.c);
		cpsr1.setNVValue(cpsr0.v);
	}

}

//
// wbExec - write back phase
//
function wbExec() {																// {joj 14/11/17}

    fork(regWB.update());
	
	
    wait(1); //To guarantee regWB updated in time for following if statement

    if ((instrOpTypeRdt(regWB.vIns) == OP_TYPE_REG || instrHasNoDstRR(regWB.vIns) || instrHasNoDstRI(regWB.vIns) || regWB.vIns == BL)){
        fork(regOUT1.update());
	}
	
	//Update CPSR1 if S set or comparison instruction
	if((regWB.vSBit == "S") || (regWB.vIns >= CMN && regWB.vIns <= TST) || (regWB.vIns >= CMNi && regWB.vIns <= TSTi)){
		cpsr1.update();
	} else {
		cpsr1.setInvalid(1);
	}

	wait(7);
    if ((regWB.vIns != STRi) && (regWB.vIns != STR) && (regWB.vIns != B) && (instrOpTypeRdt(regWB.vIns) == OP_TYPE_REG || instrHasNoDstRR(regWB.vIns) || instrHasNoDstRI(regWB.vIns) || regWB.vIns == BL) && (regOUT1.tag != -2)) {
		
		//Update CPSR1 if S set or comparison instruction
		if((regWB.vSBit == "S") || (regWB.vIns >= CMN && regWB.vIns <= TST) || (regWB.vIns >= CMNi && regWB.vIns <= TSTi)){
			cpsr.setNNValue(cpsr1.n);
			cpsr.setNZValue(cpsr1.z);
			cpsr.setNCValue(cpsr1.c);
			cpsr.setNVValue(cpsr1.v);
		}

		regFile[regOUT1.tag].setNewValue(regOUT1.value);

        wait(8);

        fork(apOUT1_RF.animate(24));
		if((regWB.vSBit == "S") || (regWB.vIns >= CMN && regWB.vIns <= TST) || (regWB.vIns >= CMNi && regWB.vIns <= TSTi)){
			fork(apCPSR1_RF.animate(24));
		}

        //
        // Second half of the clock cycle ---------------------------------------khgjhgjfj---------------
        //
        regFile[regOUT1.tag].update();
		//Update CPSR1 if S set or comparison instruction
		if((regWB.vSBit == "S") || (regWB.vIns >= CMN && regWB.vIns <= TST) || (regWB.vIns >= CMNi && regWB.vIns <= TSTi)){
			cpsr.update();
		}

		//Update the stack pointer visualisation
		if(regOUT1.tag == 13){
			sp.moveSP(regFile[13].value);
		}
        wait(19);

    } else {

        wait(67);

    }

    if (regWB.vIns != STALL && regWB.vIns != EMPTY) {                   // {joj 30/10/06}
        instrCount++;                                                   // {joj 30/10/06}
        statIC.setTxt("%4d", instrCount);                               // {joj 30/10/06}
    }                                                                   // {joj 30/10/06}
    tickCount++;                                                        // {joj 30/10/06}
    statTE.setTxt("%4d", tickCount);                                    // {joj 30/10/06}

}

//
// nonPipelinedBranch
//
function nonPipelinedBranch() {										// {joj 14/11/11}

//    fork(ap4_ADD4.animate(24));                                		// {joj 2/11/12}
    fork(apID_ADDi.animate(24));                               		// {joj 2/11/12}
	apPC_PC1.animate(12);											// {joj 2/11/12}
//    fork(apPC1_ADD4.animate(12));									// {joj 2/11/12}
    fork(apPC1_ADDi.animate(12));									// {joj 2/11/12}
	wait(12);														// {joj 2/11/12}


	if (instrIsBranch(regID.vIns)) {
        if ((regFile[regID.vRs1].value == 0) == (regID.vIns == B)) {
            apADDi_MUX3.animate(20);
            regPC.setNewValue((regPC.value + regID.vRs2) & 0x7F);
        } else {
//            apADD4_MUX3.animate(20);
            regPC.setNewValue((regPC.value + 4) & 0x7F);
        }
        apMUX3_MUX1.animate(14);
    } else {
        regPC.setNewValue((regPC.value + 4) & 0x7F);
//        apADD4_MUX3.animate(20);
        apMUX3_MUX1.animate(14);
    }

	regFile[15].setNewValue(regPC.newValue);		// Update PC in regfile

    apMUX1_PC.animate(6);

}

//
// execNonPipelined()
//
function execNonPipelined() {													// {joj 14/11/17}

    num regA, regB, result, smdr;

    // Update registers

    // IF

    regPC.update();
	regFile[15].update();		// Update PC in regfile
    im.setActive(regPC.newValue);

    apPC_IM.animate(24);

    apIM_ID.animate(40);                                             			// {joj 29/10/06}
    regID.setNewInstruction(im.instruction[regPC.value / 4]);                   // {joj 29/10/06}
    txtIM_ID.setTxt(regID.getNewInstrTxt());                                    // {joj 29/10/06}
    txtIM_ID.translate(60/2+70, 0, 20, 1, 0);                                   // {joj 29/10/06}

	/// ID

    regID.update();
	
	
    if ((instrOpTypeRs2(regID.vIns) == OP_TYPE_IMM) && (instrOpTypeRdt(regID.vIns) == OP_TYPE_REG))
        fork(apID_EX.animate(64));

    fork(nonPipelinedBranch());

    wait(24);

    // Second half of the clock cycle

	//----------------May need to fix this-------------------------------
    //if (instrIsJumpAndLink(regID.vIns)) {

    //    apADD4_MUX5.animate(20);
    //    apMUX5_B.animate(20);
    //    regA = 0;
    //    regB = (regPC.value + 4) & 0x7F;

    //} else 
	if (instrOpTypeRdt(regID.vIns) == OP_TYPE_REG) {

        regA = regFile[regID.vRs1].value;
		if(instrOpTypeRs1(regID.vRs1 != OP_TYPE_IMM))
        	regFile[regID.vRs1].highlight(bhighlight);                                 // {joj}

        txtRF_A.setTxt("R%d:%02X", regID.vRs1, regFile[regID.vRs1].value);          // {joj 29/10/06}
        txtRF_A.setOpacity(1);                                                      // {joj}
        fork(apRF_A.animate(40));

        ///if ((instrOpTypeRs2(regID.vIns) == OP_TYPE_REG) || (regID.vIns == ST)) {    // {joj}
        if ((instrOpTypeRs2(regID.vIns) == OP_TYPE_REG) || (regID.vIns == STR || regID.vIns == STRi)) {    // {joj}

            if (instrOpTypeRs2(regID.vIns) == OP_TYPE_IMM) {
                regB = regFile[regID.vRdt].value;
				if(instrOpTypeRdt(regID.vIns != OP_TYPE_UNUSED))
                	regFile[regID.vRdt].highlight(bhighlight);                     		// {joj}
            } else {
                regB = regFile[regID.vRs2].value;
                regFile[regID.vRs2].highlight(bhighlight);                    		 // {joj}
            }

            //
            // read Register file B port
            // don't read if immediate addressing
            // don't read if LD
            // read destination register if ST
            // otherwise read source 2 register
            //
            //if ((!instrIsArRI(regID.vIns)) && (regID.vIns != LD)) {         // {joj 28/10/06}
            if ((!instrIsArRI(regID.vIns)) && (regID.vIns != LDR && regID.vIns != LDRi)) {         // {joj 28/10/06}
                //num vr = (regID.vIns == ST) ? regID.vRdt : regID.vRs2;      // {joj 28/10/06}
                num vr = (regID.vIns == STR || regID.vIns == STRi) ? regID.vRdt : regID.vRs2;      // {joj 28/10/06}
                txtRF_MUX5.setTxt("R%d:%02X", vr, regFile[vr].value);       // {joj 29/10/06}
                txtRF_MUX5.setOpacity(1);                                 	// {joj}
                apRF_MUX5.animate(20);                                 		// {joj}
                apMUX5_B.animate(20);                                  		// {joj}
            }                                                               // {joj}

        } else {

            wait(40);

        }

    } else {

        wait(40);

    }

    /// EX


    if (instrOpTypeRdt(regID.vIns) == OP_TYPE_REG)
        alu.setTxtOp(regID.vIns);                                           // {joj 29/10/06}

//    if (regID.vIns == ST) {                                                 // {joj}
    if (regID.vIns == STR || regID.vIns == STRi) {   

		//Deal with barrel shift ops
		if(regEX.vIns2 != NOP){
			if(instrIsShI(regID.vIns2)){
				fork(apEX_BS.animate(24));
				txtEX_BS.setTxt("%02X", regID.vRs3); 
				txtEX_BS.setOpacity(1);
			} else {
				fork(apRF_BS.animate(24));
				txtRF_BS.setTxt("R%d:%02X", regID.vRs3, regFile[regID.vRs3].value);
				txtRF_BS.setOpacity(1);
			}
		}

        fork(apB_MUX8.animate(40));
        fork(apA_MUX6.animate(40));
        txtEX_MUX7.setTxt("%02X", regID.vRs2);                              // {joj 29/10/06}
        txtEX_MUX7.setOpacity(1);                                           // {joj 29/10/06}
        apEX_MUX7.animate(40);                                         // {joj 28/10/06}

        fork(apMUX8_SMDR.animate(40));
        fork(apMUX7_OUT0.animate(40));
        apMUX6_OUT0.animate(40);

        smdr = regFile[regID.vRdt].value;
        result = instrExecute(regID.vIns, regID.vSBit, regID.vCond, regA, regID.vRs2, regID.vIns2, regID.vRs3, cpsr.n, cpsr.z, cpsr.c, cpsr.v);



    } else if (instrOpTypeRdt(regID.vIns) == OP_TYPE_REG) {

        fork(apA_MUX6.animate(40));

		//Deal with barrel shift ops
		if(regEX.vIns2 != NOP){
			if(instrIsShI(regID.vIns2)){
				fork(apEX_BS.animate(24));
				txtEX_BS.setTxt("%02X", regID.vRs3); 
				txtEX_BS.setOpacity(1);
			} else {
				fork(apRF_BS.animate(24));
				txtRF_BS.setTxt("R%d:%02X", regID.vRs3, regFile[regID.vRs3].value);
				txtRF_BS.setOpacity(1);
			}
		}

        if (instrOpTypeRs2(regID.vIns) == OP_TYPE_IMM) {
            txtEX_MUX7.setTxt("%02X", regID.vRs2);                          // {joj 29/10/06}
            txtEX_MUX7.setOpacity(1);                                     // {joj 29/10/06}
            apEX_MUX7.animate(40);
            result = instrExecute(regID.vIns, regID.vSBit, regID.vCond, regA, regID.vRs2, regID.vIns2, regID.vRs3, cpsr.n, cpsr.z, cpsr.c, cpsr.v);
        } else {
            apB_MUX7.animate(40);
            result = instrExecute(regID.vIns, regID.vSBit, regID.vCond, regA, regB, regID.vIns2, regFile[regID.vRs3].value, cpsr.n, cpsr.z, cpsr.c, cpsr.v);
        }

        fork(apMUX7_OUT0.animate(40));
        apMUX6_OUT0.animate(40);

    } else {

        wait(80);

    }

    /// MA
		


	if(testCondition(regID.vCond)){
		
		if(regID.vCond != def){
			conditionMux.setPen(controlMuxHLPen);
			cpsrEX.setPen(controlHLPen);
			cpsrCPSR.setPen(controlHLPen);
		}


    	if (regID.vIns == LDR || regID.vIns == LDRi) {                                                 // {joj}
    	    apOUT0_Mem.animate(20);
    	    memory[((result) / 4) % 16].highlight(bhighlight);                        // {joj}
    	    apMem_MUX9.animate(20);
        	apMUX9_OUT1.animate(40);
        	result = memory[((result) / 4) % 16].value;                                         // {joj}
    	} else if (regID.vIns == STR || regID.vIns == STRi) {                                          // {joj}
        	fork(apSMDR_Mem.animate(20));
        	apOUT0_Mem.animate(20);
        	memory[((result) / 4) % 16].setNewValue(smdr);
        	memory[((result) / 4) % 16].doubleUpdate(stack[(((result) / 4) % 16) - 8]);
    	} else if (instrOpTypeRdt(regID.vIns) == OP_TYPE_REG) {
    	    apOUT0_MUX9.animate(40);
    	    apMUX9_OUT1.animate(40);
    	} else {
    	    wait(80);
    	}

    	/// WB

    	regFile[0].unHighlight();
    	regFile[1].unHighlight();
    	regFile[2].unHighlight();
    	regFile[3].unHighlight();

    	if ((instrOpTypeRdt(regID.vIns) == OP_TYPE_REG) && (regID.vIns != STR) && (regID.vIns != STRi)) {    // {joj}
    	    apOUT1_RF.animate(40);
    	    regFile[regID.vRdt].setNewValue(result);
    	    regFile[regID.vRdt].update();
    	    wait(19);
    	} else {
    	    wait(75);
    	}

	} else {

		conditionMux.setPen(muxPen);
		cpsrEX.setPen(controlHLPen);
		cpsrCPSR.setPen(controlHLPen);
	
	}

    tickCount += 5;                                                     // {joj 30/10/06}
    instrCount++;                                                       // {joj 30/10/06}
    statIC.setTxt("%4d", instrCount);                                   // {joj 30/10/06}
    statTE.setTxt("%4d", tickCount);                                    // {joj 30/10/06}

}

function exec() {

    //
    // unhighlight registers
    //
    regFile[0].unHighlight();
    regFile[1].unHighlight();
    regFile[2].unHighlight();
    regFile[3].unHighlight();

    memory[0].unHighlight();
    memory[1].unHighlight();
    memory[2].unHighlight();
    memory[3].unHighlight();

    btbPC[0].unHighlight();                                                 // {joj 2/1/06}
    btbPC[1].unHighlight();                                                 // {joj 2/1/06}
    btbPPC[0].unHighlight();                                                // {joj 2/1/06}
    btbPPC[1].unHighlight();                                                // {joj 2/1/06}

    //
    // Run the individual pipeline phases
    //
    if (peMode == PIPELINING_ENABLED) {
        fork(ifExec());
 		fork(idExec());
        fork(exExec());
        fork(maExec());
        fork(wbExec());
    } else {
        fork(execNonPipelined());
    }

    wait(8);
    resetWires();

    wait((peMode == PIPELINING_ENABLED) ? 72 : 392);

    checkPoint();

}

// eof