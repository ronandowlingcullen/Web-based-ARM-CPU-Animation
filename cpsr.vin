//
// cpsr.vin
//
// Simulation of the ARM
// Written by Rónán Dowling-Cullen, Final Year Computer Science 2018/19DLX
// Building on the simulation of the DLX written by Edsko de Vries, Summer 2003

Brush cpsrBrush = SolidBrush(PURPLE);
Brush cpsrValueBrush = SolidBrush(WHITE);
Font lFont = componentFont;
Font vFont = font;

class CPSR(num x, num y, num w, num h, num forwarding) {

    num n = 0;
	num z = 0;
	num c = 0;
	num v = 0;

	num nN = 0;
	num nZ = 0;
	num nC = 0;
	num nV = 0;

	num invalid = 0;
	
	//Co-ordinates of n,z,c and v parts
	num nx = x;
	num zx = x + w/4;
	num cx = x + 2*(w/4);
	num vx = x + 3*(w/4);

	num ny = y + h/3;
	num zy = y + h/3;
	num cy = y + h/3;
	num vy = y + h/3;

	if(forwarding) { //Small so need to change font sizes
		lFont = Font("Calibri", 16);
		vFont = Font("Calibri", 16);
	}

	// Outer Rectangle
	Rectangle outer;

	// Labels
	Rectangle nLabel;
	Rectangle zLabel;
	Rectangle cLabel;
	Rectangle vLabel;
	
	// Values
    Rectangle nValue;
    Rectangle zValue;
    Rectangle cValue;
    Rectangle vValue;

    

	if(h > w) {

		//Co-ordinates of n,z,c and v parts
		nx = x + w/3;
		zx = x + w/3;
		cx = x + w/3;
		vx = x + w/3;

		ny = y;
		zy = y + h/4;
		cy = y + 2*(h/4);
		vy = y + 3*(h/4);
		
		// Outer Rectangle
		outer = Rectangle2(0, 0, blackPen, cpsrBrush, x, y, w, h+4);		//Draw outer rectangle

		// Labels
		nLabel = Rectangle(0, 0, 0, 0, x+2, ny, 0, 0, w/4, h/3, 0, lFont, "N");
		zLabel = Rectangle(0, 0, 0, 0, x+2, zy, 0, 0, w/4, h/3, 0, lFont, "Z");
		cLabel = Rectangle(0, 0, 0, 0, x+2, cy, 0, 0, w/4, h/3, 0, lFont, "C");
		vLabel = Rectangle(0, 0, 0, 0, x+2, vy, 0, 0, w/4, h/3, 0, lFont, "V");
	
		// Values
    	nValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, nx, ny+4, 2*w/3-4, (h/4)-4, 0, vFont, "%01X", n);
    	zValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, zx, zy+4, 2*w/3-4, (h/4)-4, 0, vFont, "%01X", z);
    	cValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, cx, cy+4, 2*w/3-4, (h/4)-4, 0, vFont, "%01X", c);
    	vValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, vx, vy+4, 2*w/3-4, (h/4)-4, 0, vFont, "%01X", v);


	} else {
		
		// Outer Rectangle
		outer = Rectangle2(0, 0, blackPen, cpsrBrush, x, y, w+4, h);		//Draw outer rectangle
		
		// Labels
		nLabel = Rectangle(0, 0, 0, 0, nx, y, 0, 0, w/4, h/3, 0, lFont, "N");
		zLabel = Rectangle(0, 0, 0, 0, zx, y, 0, 0, w/4, h/3, 0, lFont, "Z");
		cLabel = Rectangle(0, 0, 0, 0, cx, y, 0, 0, w/4, h/3, 0, lFont, "C");
		vLabel = Rectangle(0, 0, 0, 0, vx, y, 0, 0, w/4, h/3, 0, lFont, "V");
	
		// Values
    	nValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, nx+4, ny, (w/4)-4, 2*h/3-4, 0, vFont, "%01X", n);
    	zValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, zx+4, zy, (w/4)-4, 2*h/3-4, 0, vFont, "%01X", z);
    	cValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, cx+4, cy, (w/4)-4, 2*h/3-4, 0, vFont, "%01X", c);
    	vValue = Rectangle2(valuesLayer, 0, 0, yellowBrush, vx+4, vy, (w/4)-4, 2*h/3-4, 0, vFont, "%01X", v);

	}


	//
    // update Values
    //
    num function updateNValue() {								
        nValue.setTxt("%01X", n);
		return 0;
    }

    num function updateZValue() {								
        zValue.setTxt("%01X", z);
		return 0;
    }

    num function updateCValue() {								
        cValue.setTxt("%01X", c);
		return 0;
    }

    num function updateVValue() {								
        vValue.setTxt("%01X", v);
		return 0;
    }

	num function updateValues() {
		updateNValue();
		updateZValue();
		updateCValue();
		updateVValue();
	}
		
		
		

	//
    // mouse enter exit event handlers for each n,z,c and v
    //
    when nValue ~> eventEE(num enter, num x, num y) {			
        nValue.setBrush(enter ? whiteBrush : yellowBrush);	
		return 0;
    }

    when zValue ~> eventEE(num enter, num x, num y) {			
        zValue.setBrush(enter ? whiteBrush : yellowBrush);	
		return 0;
    }

    when cValue ~> eventEE(num enter, num x, num y) {			
        cValue.setBrush(enter ? whiteBrush : yellowBrush);
		return 0;
    }

    when vValue ~> eventEE(num enter, num x, num y) {			
        vValue.setBrush(enter ? whiteBrush : yellowBrush);	
		return 0;
    }

    //
    // mouse left button event handler
    //
    when nValue ~> eventMB(num down, num flags, num x, num y) {	
        if (down) {
			if (flags) {
            	n = (n + 1) % 2;
			}
            updateNValue();
        }
		return 0;
    }

    when zValue ~> eventMB(num down, num flags, num x, num y) {	
        if (down) {
			if (flags) {
            	z = (z + 1) % 2;
			}
            updateZValue();
        }
		return 0;
    }

    when cValue ~> eventMB(num down, num flags, num x, num y) {	
        if (down) {
			if (flags) {
            	c = (c + 1) % 2;
			}
            updateCValue();
        }
		return 0;
    }

    when vValue ~> eventMB(num down, num flags, num x, num y) {	
        if (down) {
			if (flags) {
            	v = (v + 1) % 2;
			}
            updateVValue();
        }
		return 0;
    }

    //
    // set values
    //
    function setNValue(num val) {
        n = val;
        updateNValue();
    }

    function setZValue(num val) {
        z = val;
        updateZValue();
    }

    function setCValue(num val) {
        c = val;
        updateCValue();
    }

    function setVValue(num val) {
        v = val;
        updateVValue();
    }

	//
    // set next values
    //
    function setNNValue(num val) {
        nN = val;
    }

    function setNZValue(num val) {
        nZ = val;
    }

    function setNCValue(num val) {
        nC = val;
    }

    function setNVValue(num val) {
        nV = val;
    }


	function update() {
		n = nN;
		z = nZ;
		c = nC;
		v = nV;
		invalid = 0;
		updateValues();
	}


	function setInvalid(num val) {
		invalid = val;
		if(invalid){
			nValue.setTxt("X");
			zValue.setTxt("X");
			cValue.setTxt("X");
			vValue.setTxt("X");
		}
	}

	//
    // setOpacity
    //
    function setOpacity(num opacity) {
        outer.setOpacity(opacity);
        nLabel.setOpacity(opacity);
        zLabel.setOpacity(opacity);
        cLabel.setOpacity(opacity);
        vLabel.setOpacity(opacity);
        nValue.setOpacity(opacity);
        zValue.setOpacity(opacity);
        cValue.setOpacity(opacity);
        vValue.setOpacity(opacity);
    }

    num hmode = 0;

    //
    // reset
    //
    function reset() {
    	n = 0;
		z = 0;
		c = 0;
		v = 0;
        updateValues();
		setInvalid(1);
    }

	

}




